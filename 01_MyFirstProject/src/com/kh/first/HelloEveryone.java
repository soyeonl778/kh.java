package com.kh.first; //패키지 선언부 : 클래스 생성 시 선택한 패키지의 위치를 알려주는 구문

// 클래스 선언부 : 해당 클래스를 정의하는 부분
// 이 클래스의 이름은 HelloEveryone, 풀 네임은 kh.first.HelloEveryone
public class HelloEveryone { // HelloEveryone 클래스 영역 시작\
	
	/*
	 * Class
	 * 유사한 특징을 지닌 코드들 (변수, 메소드) 을 묶어놓은 집합체
	 * 차바에서는 모든 코드들은 반드시 클래스 안에 존재해야 하며, 한 개의 슬랙스 = 한 개의 .java 파일이 된다.	 
	 */
	
	// 내가 작성하고 싶은 코드를 적는 부분
	//=? 단, 소스코드는 클레스 안에 바로 작성이 불가능하고, "메소드" 안에 작성해야 함
	
	//메소드 만들기
	// => main 메소드, main 이 아닌 메소드 (일반 메소드)
	
	//일반 메소드의 기본 표현법
	
	/*
	   public void 메소드명() {
	   
	   }
	 */
	//메인 메소드 표현법
	public static void main(String[] args) { // main 메소드 영역 시작
		
		/*
		 * Method
		 * 사전적으로 "기능"을 의미함
		 * 자바에서의 메소드도 마찬가지로 하나의 기능 단위
		 * ex) 덧셈용, 뺄셈용, 곱셈용, ..
		 * 
		 * Method 의 특징
		 * 1. 메소드는 main 메소드와 일반 메소드로 나뉜다.
		 * 2. 하나의 클래스 안에 여러 메소드를 만들 수 있다.
		 * => 메소드의 미름은 원칙적으로 중복이 불가능, 어떤 규칙(오버로딩) 에 의해 이름이 중복될 수 있다.
		 * 3. 메소드 안에 있는 코드를 실행하려면 그 메소드를 "호출" 이라는 것을 해줘야 한다.
		 * => 일반 메소드의 경우에는 스스로 실행되지 X (다른 메소드에서 호출해야함)
		 * => main 메소드의 경우에는 JVM 이 호출해준다.
		 * 
		 * * main 메소드
		 * 프로그램의 시작점을 나타내는 메소드,
		 * 프로그램당 최소 1개씩은 가지고 있어야 한다. (여러개도 존재 가능)
		 * 
		 * 메소드가 필요한 이유
		 * => 하나의 기능을 메소드별로 정의해두고 필요에 따라 언제든지 가져다 쓸 목적(재사용)
		 */
		
		
		// System.out. ptintln(내용물); -> 해당 내용물을 콘솔창에 출력하고 줄바꿈이 일어남
		System.out.println("Hi everyone!"); // 해당 내용물을 콘솔창에 출력해주는 역할
		System.out.println("안녕하세요");
		
		// System.out.print(내용물); -> 해당 내용물을 콘솔창에 출력하고 끝
		System.out.print("여러분~!\n"); //-> \n :엔터키를 한번 쳐준 효과(줄바꿈 효과) =>개행문자
		System.out.print("반갑습니다^^");
		
		// System.out.printf(내용물); -> 해당 내용물을 콘솔창에 출력, 줄바꿈이 일어나지 않음
		
		
		
	} // main 메소드 영역 끝
	
	
	
	
	
} // HelloEveryone 클래스 영역 끝

